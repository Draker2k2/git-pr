#!/usr/bin/env bash

# Git extension for making GitHub pull requests.
# Usage: git pr [args] [title] [description]

# print to stderr and exit
function exit_error {
    printf >&2 "$@\n" 
    exit 1
}

# use editor to set title and body
function set_with_editor {
    # find user editor
    user_editor=`git config --get core.editor`
    user_editor=${user_editor:-${VISUAL:-${EDITOR:-vi}}}

    # use a message file similar to git commit
    git_root=`git rev-parse --show-toplevel`
    pr_msg_file="$git_root/.git/PULLREQUEST_EDITMSG"

    # list of commits between the base and head branches
    commit_list=`git log --oneline $base..$branch | sed "s/^/# /"`

    # write pull request message file template
    cat > $pr_msg_file << EOF

# Please enter a pull request title and description, on separate lines.
# Lines starting with '#' will be ignored, and an empty title aborts
# the pull request.
#
# $commits commit(s) [$branch -> $base]
#
$commit_list
#
EOF

    # start editor
    $user_editor "$pr_msg_file"

    # first line is title
    title=`grep -v ^# "$pr_msg_file" | head -1`

    if [ -z "$title" ]; then
        exit_error "Aborting pull request due to empty title."
    fi

    # subsequent lines are body, remove leading newlines, escape newlines for json
    body=`grep -v ^# "$pr_msg_file" | tail +2 | \
          sed '/./,$!d' | \
          sed 's/$/\\\n/' | tr -d '\n'`
}

# command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        -b|--base)  base="$2"; shift;;
        -y|--yes)   skip_confirm=1;;
        -*)         exit_error "Unknown argument: $1";;
        *)          break;;
    esac
    shift
done

title=$1
body=$2

if [ -z "$base" ]; then
    base="master"
fi

# extract github repository from remote origin
repo=`git remote get-url origin | sed -n "s/.*\/\/github.com\/\(..*\).git/\1/p"`

if [ -z "$repo" ]; then
    exit_error "Repository not supported, must be GitHub."
fi

# grab github authentication credentials
credentials=`echo "host=github.com" | git credential fill`

username=`echo $credentials | sed -n "s/.*username=\([^ ]*\).*/\1/p"`
password=`echo $credentials | sed -n "s/.*password=\([^ ]*\).*/\1/p"`

if [ -z "$username" ] || [ -z "$password" ]; then
    exit_error "Could not get GitHub credentials."
fi

# current branch name
branch=`git rev-parse --abbrev-ref HEAD`

# number of added commits
commits=`git rev-list --count $base..$branch`

if [ "$commits" = 0 ]; then
    exit_error "No commits between $branch and $base"
fi

# push changes, and set up remote if not already tracking upstream branch.
if git rev-parse @{u} > /dev/null 2>&1; then
    git push > /dev/null
else
    git push -u origin "$branch"
fi

# exit if git push fails
if [ $? -ne 0 ]; then
    exit 1
fi

echo ""

# use editor if title is not set
if [ -z "$title" ]; then
    set_with_editor
    skip_confirm=1
fi

# print pull request summary
echo "$commits commit(s) [$branch -> $base]"
echo "Title: $title"

if [ -z "$skip_confirm" ]; then
    printf "\nOpen pull request [Y/n]? "
    read confirm

    if [ -n "$confirm" ] && [ "$confirm" != "Y" ] && [ "$confirm" != "y" ]; then
        exit 1
    fi
fi

echo ""

# create a pull request through the github api
response=`wget --quiet --output-document=- --content-on-error \
               --user="$username" --password="$password" --auth-no-challenge \
               --header="Content-Type: application/json" \
               --header="Accept: application/vnd.github.v3+json" \
               --post-data="{\"title\":\"$title\",\"body\":\"$body\",\"head\":\"$branch\",\"base\":\"$base\"}" \
               "https://api.github.com/repos/$repo/pulls"`
wget_status=$?

# TODO: fix very crude json parsing
if [ $wget_status -eq 0 ]; then
    github_pr_url=`echo $response | sed -n 's/{[^{]*"html_url": "\([^"]*\).*/\1/p'`
    echo "Pull request opened:"
    echo "$github_pr_url"

    # TODO: remove this
    if [ -z "$github_pr_url" ]; then
        echo "[Debug] Unknown API response:"
        echo "$response"
    fi
elif [ $wget_status -eq 8 ]; then
    github_error_msg=`echo $response | sed -n 's/.*"errors":.*"message": "\([^"]*\).*/\1/p'`
    if [ -z "$github_error_msg" ]; then
        exit_error "Unknown API response:\n$response"
    else
        exit_error "$github_error_msg"
    fi
elif [ $wget_status -eq 6 ]; then
	exit_error "Wrong username or password/token."
else
    exit_error "Network error."
fi
